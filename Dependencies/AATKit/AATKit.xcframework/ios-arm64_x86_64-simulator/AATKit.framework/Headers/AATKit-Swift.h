#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AATKIT_SWIFT_H
#define AATKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AATKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AATAdChoicesIconPosition, closed) {
  AATAdChoicesIconPositionTopLeft = 0,
  AATAdChoicesIconPositionTopRight = 1,
  AATAdChoicesIconPositionBottomLeft = 2,
  AATAdChoicesIconPositionBottomRight = 3,
};


/// Conform to this protocol to be notified about the ads display events
SWIFT_PROTOCOL("_TtP6AATKit20AATAdDisplayDelegate_")
@protocol AATAdDisplayDelegate
/// This method will be called with the ad display event
- (void)aatAdCurrentlyDisplayed;
/// This method will be called when the app resumes after displaying an ad
- (void)aatResumeAfterAd;
@end

@protocol AATAdMobCustomEventsDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATAdMobCustomEvents_")
@protocol AATAdMobCustomEvents
- (void)setCustomEventDelegate:(id <AATAdMobCustomEventsDelegate> _Nonnull)delegate;
@end

@class AATReward;

SWIFT_PROTOCOL("_TtP6AATKit28AATAdMobCustomEventsDelegate_")
@protocol AATAdMobCustomEventsDelegate
- (void)customEventLoaderDidFailAd;
- (void)customEventLoaderDidReceiveAd;
- (void)customEventReportImpression;
- (void)customEventWillPresentModal;
- (void)customEventWillDismissModal;
- (void)customEventDidDismissModal;
- (void)customEventWasClicked;
- (void)didRewardUserWithReward:(AATReward * _Nonnull)reward;
@end

typedef SWIFT_ENUM(NSInteger, AATAdNetwork, open) {
  AATAdNetworkINMOBI = 0,
  AATAdNetworkADMOB = 1,
  AATAdNetworkEMPTY = 2,
  AATAdNetworkAPPLOVIN = 3,
  AATAdNetworkAPPLOVINMAX = 4,
  AATAdNetworkSMARTAD = 5,
  AATAdNetworkSMARTADSERVERDIRECT = 6,
  AATAdNetworkRTB2 = 7,
  AATAdNetworkDFP = 8,
  AATAdNetworkSMAATO = 9,
  AATAdNetworkFACEBOOK = 10,
  AATAdNetworkFEEDAD = 11,
  AATAdNetworkUNITY = 12,
  AATAdNetworkADCOLONY = 13,
  AATAdNetworkAPPNEXUS = 14,
  AATAdNetworkOGURY = 15,
  AATAdNetworkCRITEOSDK = 16,
  AATAdNetworkRUBICON = 17,
  AATAdNetworkAMAZONHB = 18,
  AATAdNetworkPUBNATIVE = 19,
  AATAdNetworkTEADS = 20,
  AATAdNetworkBLUESTACK = 21,
  AATAdNetworkYOC = 22,
  AATAdNetworkVUNGLE2 = 23,
  AATAdNetworkDFPDIRECT = 24,
};

typedef SWIFT_ENUM(NSInteger, AATAdType, open) {
  AATAdTypeFullscreen = 0,
  AATAdTypeBanner = 1,
  AATAdTypeNative = 2,
  AATAdTypeRewarded = 3,
  AATAdTypeAppOpen = 4,
};

@protocol AATAppOpenPlacementDelegate;
@protocol AATStatisticsDelegate;
@protocol AATImpressionDelegate;
@class NSString;

SWIFT_PROTOCOL("_TtP6AATKit21AATAppOpenAdPlacement_")
@protocol AATAppOpenAdPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATAppOpenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to be notified when there is no ad available
SWIFT_PROTOCOL("_TtP6AATKit15AATNoAdDelegate_")
@protocol AATNoAdDelegate
/// This method will be called when there is no ad available
- (void)aatNoAd;
@end


/// Conform to this protocol to be notified when there is an ad
SWIFT_PROTOCOL("_TtP6AATKit17AATHaveAdDelegate_")
@protocol AATHaveAdDelegate
/// This method will be called when there is an ad
- (void)aatHaveAd;
@end


/// Conform to this protocol to listen to the AATFullscreenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit30AATFullscreenPlacementDelegate_")
@protocol AATFullscreenPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end


/// Conform to this protocol to listen to the AATAppOpenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit27AATAppOpenPlacementDelegate_")
@protocol AATAppOpenPlacementDelegate <AATFullscreenPlacementDelegate>
@end

enum HorizontalAlign : NSInteger;
enum VerticalAlign : NSInteger;

SWIFT_CLASS("_TtC6AATKit14AATBannerAlign")
@interface AATBannerAlign : NSObject
- (nonnull instancetype)initWithHorizontalAlign:(enum HorizontalAlign)horizontalAlign verticalAlign:(enum VerticalAlign)verticalAlign OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HorizontalAlign, open) {
  HorizontalAlignLeading = 0,
  HorizontalAlignTrailing = 1,
  HorizontalAlignCenter = 2,
};

typedef SWIFT_ENUM(NSInteger, VerticalAlign, open) {
  VerticalAlignTop = 0,
  VerticalAlignBottom = 1,
  VerticalAlignCenter = 2,
};

@class AATBannerCacheConfiguration;
@class AATBannerRequest;
@class AATBannerPlacementWrapperView;

/// A cache of automatically preloaded banner ads.
/// The cache will always try to have a defined amount of banners available for immediate handout to the app whenever they are needed. <em>Note:</em> The BannerCache needs to be destroyed when no longer needed. See <code>AATBannerCache/init(cacheConfiguration:)</code>
SWIFT_CLASS("_TtC6AATKit14AATBannerCache")
@interface AATBannerCache : NSObject
/// set statistics delegate
/// <code>AATStatisticsDelegate</code> implementation that will be notified about statistics events.
@property (nonatomic, weak) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Setting impressions delegate
/// Set the banner cache <code>AATImpressionDelegate</code>
/// <code>AATImpressionDelegate</code> instance
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Creates a cache of automatically preloaded banner ads.
/// \param cacheConfiguration instance of <code>AATBannerCacheConfiguration</code> used to configure the cache.
///
- (nonnull instancetype)initWithCacheConfiguration:(AATBannerCacheConfiguration * _Nonnull)cacheConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Updates the configuration that will be used when requesting new banners.
/// \param requestConfiguration AATBannerRequest instance
///
/// \param shouldRefresh True if the whole cache should be re-loaded with new banner request configuration, false if new configuration should only be used for new requests.
///
- (void)updateRequestConfiguration:(AATBannerRequest * _Nonnull)requestConfiguration shouldRefresh:(BOOL)shouldRefresh;
/// Returns an instance of <code>AATBannerPlacementWrapperView</code> to be used within the app. Also automatically counts an ad space.
/// BannerCache will no longer hold any references to returned banners, and they need to be destroyed manually by the app.
/// \param force true if cache should try to return banner ignoring the frequency capping set by { BannerCacheConfiguration.setMinimumDelay(int) }, default value is false
///
///
/// returns:
/// Ad View to be displayed
- (AATBannerPlacementWrapperView * _Nullable)consumeWithForce:(BOOL)force SWIFT_WARN_UNUSED_RESULT;
/// Destroys the BannerCache, clearing all preloaded banner ads and canceling pending reload requests.
/// <ul>
///   <li>
///     For proper memory management, it needs to be called when the BannerCache is no longer needed.
///   </li>
///   <li>
///     Destroyed BannerCache can no longer be used
///   </li>
/// </ul>
- (void)destroy;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AATBannerRequestError;

@interface AATBannerCache (SWIFT_EXTENSION(AATKit))
- (void)requestCompletedSuccessfullyWithRequest:(AATBannerRequest * _Nonnull)request with:(AATBannerPlacementWrapperView * _Nonnull)view;
- (void)requestFailedToLoadWithRequest:(AATBannerRequest * _Nonnull)request with:(AATBannerRequestError * _Nonnull)error;
@end

@protocol AATBannerCacheDelegate;
@protocol AATBannerRequestDelegate;

/// A configuration object to be used when creating AATBannerCache
SWIFT_CLASS("_TtC6AATKit27AATBannerCacheConfiguration")
@interface AATBannerCacheConfiguration : NSObject
@property (nonatomic, weak) id <AATBannerCacheDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable bannerRequestDelegate;
@property (nonatomic) BOOL shouldCacheAdditionalAdAtStart;
@property (nonatomic, strong) AATBannerRequest * _Nonnull requestConfiguration;
@property (nonatomic) NSTimeInterval minDelay;
/// Init the <code>AATBannerCacheConfiguration</code> object
/// \param placementName the placement name
///
/// \param size the desired cache size
///
- (nonnull instancetype)initWithPlacementName:(NSString * _Nonnull)placementName size:(NSInteger)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AATBannerCacheConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATBannerCacheDelegate_")
@protocol AATBannerCacheDelegate
- (void)firstBannerLoaded;
@end


/// Banner configuration class
SWIFT_CLASS("_TtC6AATKit22AATBannerConfiguration")
@interface AATBannerConfiguration : NSObject
@property (nonatomic) BOOL isManualAdSpaceCounting;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setNumberOfWorkers:(NSInteger)numberOfWorkers;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATBannerConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AATBannerPlacementSize, open) {
  AATBannerPlacementSizeBanner320x53 = 0,
  AATBannerPlacementSizeBanner320x50 = 1,
  AATBannerPlacementSizeBanner375x50 = 2,
  AATBannerPlacementSizeBanner390x50 = 3,
  AATBannerPlacementSizeBanner414x50 = 4,
  AATBannerPlacementSizeBanner428x50 = 5,
  AATBannerPlacementSizeBanner768x90 = 6,
  AATBannerPlacementSizeBanner300x250 = 7,
  AATBannerPlacementSizeBanner468x60 = 8,
  AATBannerPlacementSizeBanner320x75 = 9,
  AATBannerPlacementSizeBanner320x100 = 10,
  AATBannerPlacementSizeBanner320x150 = 11,
  AATBannerPlacementSizeBanner320x160 = 12,
  AATBannerPlacementSizeBanner300x50 = 13,
  AATBannerPlacementSizeBanner320x480 = 14,
};

@class NSCoder;

SWIFT_CLASS("_TtC6AATKit29AATBannerPlacementWrapperView")
@interface AATBannerPlacementWrapperView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The banner request that will be used by the infeed banner placement
SWIFT_CLASS("_TtC6AATKit16AATBannerRequest")
@interface AATBannerRequest : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInformation;
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDelegate:(id <AATBannerRequestDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Update request sizes
/// \param sizes a set of <code>AATBannerSize</code>
///
- (void)setRequestBannerSizes:(NSSet<NSNumber *> * _Nonnull)sizes;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATBannerRequestDelegate_")
@protocol AATBannerRequestDelegate
- (BOOL)shouldUseTargetingFor:(AATBannerRequest * _Nonnull)request network:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
@end


/// Banner request error class
SWIFT_CLASS("_TtC6AATKit21AATBannerRequestError")
@interface AATBannerRequestError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATBannerSize, open) {
  AATBannerSizeBanner300x50 = 0,
  AATBannerSizeBanner320x53 = 1,
  AATBannerSizeBanner768x90 = 2,
  AATBannerSizeBanner300x250 = 3,
  AATBannerSizeBanner468x60 = 4,
  AATBannerSizeMultipleSizes = 5,
  AATBannerSizeBanner320x75 = 6,
  AATBannerSizeBanner320x100 = 7,
  AATBannerSizeBanner320x150 = 8,
  AATBannerSizeBanner320x160 = 9,
  AATBannerSizeBanner320x480 = 10,
  AATBannerSizeBanner728x90 = 11,
  AATBannerSizeBanner320x50 = 12,
  AATBannerSizeBanner375x50 = 13,
  AATBannerSizeBanner390x50 = 14,
  AATBannerSizeBanner414x50 = 15,
  AATBannerSizeBanner428x50 = 16,
};

enum NonIABConsent : NSInteger;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPDelegate_")
@protocol AATCMPDelegate
- (void)consentDidUpdate:(enum NonIABConsent)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
@end

@class UIViewController;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPProtocol_")
@protocol AATCMPProtocol
- (BOOL)isSuccessfullyInitialized:(NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)start:(NSString * _Nonnull)source;
- (void)setDelegate:(NSString * _Nonnull)source :(id <AATCMPDelegate> _Nonnull)delegate;
- (void)reload:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (enum NonIABConsent)getConsentForNetwork:(NSString * _Nonnull)source :(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
- (void)showIfNeeded:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (void)editConsent:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
@end

@class AATConsentImplementation;

/// AATKit Runtime Configurations
SWIFT_CLASS("_TtC6AATKit23AATRuntimeConfiguration")
@interface AATRuntimeConfiguration : NSObject
@property (nonatomic) BOOL consentRequired;
@property (nonatomic, strong) AATConsentImplementation * _Nullable consent;
@property (nonatomic) BOOL isUseGeoLocation;
/// Creates the AATRuntimeConfiguration object to be used when reconfiguring AATKit.
/// It will be automatically initialized with previously used values.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@protocol AATDelegate;
@class NSNumber;

/// AATKit Configurations
SWIFT_CLASS("_TtC6AATKit16AATConfiguration")
@interface AATConfiguration : AATRuntimeConfiguration
@property (nonatomic, weak) id <AATDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable initialRules;
@property (nonatomic) BOOL shouldCacheRules;
@property (nonatomic) BOOL shouldSkipRules;
@property (nonatomic, copy) NSString * _Nullable alternativeBundleId;
@property (nonatomic) BOOL shouldReportUsingAlternativeBundleId;
@property (nonatomic, strong) NSNumber * _Nullable testModeAccountId;
@property (nonatomic) BOOL useDebugShake;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATConfiguration (SWIFT_EXTENSION(AATKit))
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6AATKit24AATConsentImplementation")
@interface AATConsentImplementation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setNoConsentNetworkStopSet:(NSSet<NSNumber *> * _Nonnull)stopSet;
@end



/// <ul>
///   <li>
///     Notifies about AATKit events.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP6AATKit11AATDelegate_")
@protocol AATDelegate
@optional
/// Notifies that the AATKit has obtained ad rules.
/// \param fromTheServer Indicates if the rules came from the server. It will return false if the currently used rules come from the <code>AATSDK.setInitialRules(rules:)</code> method or the cached rules are used.
///
- (void)AATKitObtainedAdRulesFromTheServer:(BOOL)fromTheServer;
/// Notifies that application’s bundle ID was not recognized by the AddApptr server.
- (void)AATKitUnknownBundleId;
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATFullscreenPlacement_")
@protocol AATFullscreenPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATFullscreenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end



enum AATMediationType : NSInteger;

/// An object contains impression level information.
SWIFT_CLASS("_TtC6AATKit13AATImpression")
@interface AATImpression : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable bannerSize;
@property (nonatomic, readonly) enum AATAdNetwork adNetwork;
@property (nonatomic, readonly, copy) NSString * _Nonnull networkKey;
@property (nonatomic, readonly) BOOL isDirectDeal;
@property (nonatomic, readonly) enum AATMediationType mediationType;
@property (nonatomic, readonly) double price;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate called when the impression is counted.
SWIFT_PROTOCOL("_TtP6AATKit21AATImpressionDelegate_")
@protocol AATImpressionDelegate
/// Notifies that AATKit has counted an impression.
/// \param impression the AATImpression object
///
- (void)didCountImpression:(AATImpression * _Nonnull)impression;
@end

@protocol AATInfeedBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit24AATInfeedBannerPlacement_")
@protocol AATInfeedBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATInfeedBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Request banner ad from the placement
/// \param request the <code>AATBannerRequest</code> to be used
///
/// \param completion Completion result with <code>AATBannerPlacementWrapperView</code> or <code>AATBannerRequestError</code>
///
- (void)requestAdWithRequest:(AATBannerRequest * _Nonnull)request completion:(void (^ _Nonnull)(AATBannerPlacementWrapperView * _Nullable, AATBannerRequestError * _Nullable))completion;
/// Cancel a specific <code>AATBannerRequest</code>
/// \param request The request to be canceled
///
- (void)cancelWithRequest:(AATBannerRequest * _Nonnull)request;
/// Manually Count an Ad Space
- (void)countAdSpace;
@end


/// Conform to this protocol to listen to the AATInfeedBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATInfeedBannerPlacementDelegate_")
@protocol AATInfeedBannerPlacementDelegate <AATAdDisplayDelegate>
@end


SWIFT_PROTOCOL("_TtP6AATKit16AATInitializable_")
@protocol AATInitializable
- (nonnull instancetype)init;
@end


SWIFT_CLASS("_TtC6AATKit16AATLocationUtils")
@interface AATLocationUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface AATLocationUtils (SWIFT_EXTENSION(AATKit)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


/// Desired log level
typedef SWIFT_ENUM(NSInteger, AATLogLevel, open) {
  AATLogLevelVerbose = 0,
  AATLogLevelDebug = 1,
  AATLogLevelInfo = 2,
  AATLogLevelWarn = 3,
  AATLogLevelError = 4,
};


SWIFT_CLASS("_TtC6AATKit9AATLogger")
@interface AATLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AATManagedConsentDelegate;

/// The managed consent (should be initialized with <code>AATCMPProtocol</code>). Will fire the different events of the user consent interactions. See <code>AATManagedConsentDelegate</code>
SWIFT_CLASS("_TtC6AATKit17AATManagedConsent")
@interface AATManagedConsent : AATConsentImplementation
- (nullable instancetype)initWithCmp:(id <AATCMPProtocol> _Nullable)cmp delegate:(id <AATManagedConsentDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)showIfNeeded:(UIViewController * _Nonnull)viewController;
- (void)editConsent:(UIViewController * _Nonnull)viewController;
- (void)reload:(UIViewController * _Nonnull)viewController;
@end



@interface AATManagedConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATManagedConsent (SWIFT_EXTENSION(AATKit)) <AATCMPDelegate>
- (void)consentDidUpdate:(enum NonIABConsent)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
@end


SWIFT_PROTOCOL("_TtP6AATKit25AATManagedConsentDelegate_")
@protocol AATManagedConsentDelegate
- (void)managedConsentNeedsUserInterface:(AATManagedConsent * _Nonnull)managedConsent;
- (void)managedConsentCMPFinishedWith:(enum NonIABConsent)state;
- (void)managedConsentCMPFailedToLoad:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
- (void)managedConsentCMPFailedToShow:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
@end

/// <ul>
///   <li>
///     AATKit rule mediation type
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AATMediationType, closed) {
  AATMediationTypeWATERFALL = 1,
  AATMediationTypeAUCTION = 2,
  AATMediationTypeMAYO = 3,
};

@protocol AATMultiSizeBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit27AATMultiSizeBannerPlacement_")
@protocol AATMultiSizeBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATMultiSizeBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@end


/// Conform to this protocol to listen to the AATMultiSizeBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit35AATMultiSizeBannerPlacementDelegate_")
@protocol AATMultiSizeBannerPlacementDelegate <AATAdDisplayDelegate, AATNoAdDelegate>
/// This method will be called when there is an ad
- (void)aatHaveAdWithBannerViewWithBannerView:(AATBannerPlacementWrapperView * _Nonnull)bannerView;
@end

@class AATNativeAdRating;

SWIFT_PROTOCOL("_TtP6AATKit15AATNativeAdData_")
@protocol AATNativeAdData <NSObject>
/// Binds this native ad instance with given ViewGroup. Needed for click handling and tracking.
/// \param view View used to render the native ad.
///
/// \param mainImageView View used to show the main image of the ad. Can be null.
///
/// \param iconView View used to show the icon of the native ad.
///
/// \param ctaView View used to show the Call To Action of the native ad.
///
- (void)attachToView:(UIView * _Nonnull)view mainImageView:(UIView * _Nullable)mainImageView iconView:(UIView * _Nullable)iconView ctaView:(UIView * _Nullable)ctaView;
/// Removes the binding between native ad and ViewGroup.
/// Should be called when the native ad will no longer be presented and should be destroyed.
- (void)detachFromLayout;
/// Returns the title of native ad.
///
/// returns:
/// String with title asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Returns the description of native ad.
///
/// returns:
/// String with description asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable adDescription;
/// Returns the call to action of native ad.
///
/// returns:
/// String with call to action asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
/// Returns the URL of the image asset of native ad.
///
/// returns:
/// String with URL of the image asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Returns the URL of the icon asset of native ad.
///
/// returns:
/// String with URL of the icon asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// Returns the rating asset of native ad.
///
/// returns:
/// NativeAdRating instance containing both value and scale of rating, or null if it is not available.
@property (nonatomic, readonly, strong) AATNativeAdRating * _Nullable rating;
/// Returns the view with branding logo or ad information related to the ad network providing the native ad.
/// Some networks like Facebook Audience Network or Flurry require this special view to be visible on native ads.
///
/// returns:
/// View that should be added to native ad layout, or null if it is not available.
@property (nonatomic, readonly, strong) UIView * _Nullable brandingLogo;
/// Returns the advertiser asset of native ad (not the same as ad network providing it).
///
/// returns:
/// String with advertiser asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable advertiser;
/// Returns the ad network providing given native ad
///
/// returns:
/// Enum value representing the ad network providing the ad.
@property (nonatomic, readonly) enum AATAdNetwork network;
/// Returns if the native ad has expired and shall no longer be used.
///
/// returns:
/// True if native ad has expired, false otherwise.
- (BOOL)isExpired SWIFT_WARN_UNUSED_RESULT;
/// Returns if the native ad is ready to be displayed.
///
/// returns:
/// True if native ad is ready, false otherwise.
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATNativePlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATNativeAdPlacement_")
@protocol AATNativeAdPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATNativePlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Requests placement reload.
- (BOOL)reload;
/// Returns how many ads are currently loading for given native ad placement.
///
/// returns:
/// Number of ads that are currently loading for given placement.
- (NSInteger)getNumberOfCurrentlyLoadingNativeAds SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Manually Count an Ad Space
- (BOOL)reportAdSpace SWIFT_WARN_UNUSED_RESULT;
/// Returns the instance of native ad for given native ad placement.
///
/// returns:
/// Native ad instance if it is loaded for given placement, null otherwise.
- (id <AATNativeAdData> _Nullable)getNativeAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Native ad rating
SWIFT_CLASS("_TtC6AATKit17AATNativeAdRating")
@interface AATNativeAdRating : NSObject
- (nonnull instancetype)initWithValue:(double)value scale:(double)scale OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATNativeAdType, open) {
  AATNativeAdTypeAppInstall = 0,
  AATNativeAdTypeContent = 1,
  AATNativeAdTypeVideo = 2,
  AATNativeAdTypeUnified = 3,
  AATNativeAdTypeOther = 4,
  AATNativeAdTypeUnknown = 5,
};


/// Conform to this protocol to listen to the AATNativePlacement events
SWIFT_PROTOCOL("_TtP6AATKit26AATNativePlacementDelegate_")
@protocol AATNativePlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end


typedef SWIFT_ENUM(NSInteger, AATPluginName, open) {
  AATPluginNameAdobe = 1,
  AATPluginNameCorona = 2,
  AATPluginNameMarmalade = 3,
  AATPluginNameUnity = 4,
  AATPluginNameXamarin = 5,
  AATPluginNameReactNative = 6,
  AATPluginNameCordova = 7,
};


SWIFT_CLASS("_TtC6AATKit23AATPluginVersioningTool")
@interface AATPluginVersioningTool : NSObject
+ (void)appendPluginInformation:(enum AATPluginName)pluginName patchLevel:(NSString * _Nonnull)patchLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Will be notified with reports event
SWIFT_PROTOCOL("_TtP6AATKit18AATReportsDelegate_")
@protocol AATReportsDelegate
/// Notifies you with AATKit reports event.
/// \param report The report content.
///
- (void)onReportSent:(NSString * _Nonnull)report;
@end


/// The rewarded video incentive reward object
SWIFT_CLASS("_TtC6AATKit9AATReward")
@interface AATReward : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATRewardedVideoPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit25AATRewardedVideoPlacement_")
@protocol AATRewardedVideoPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATRewardedVideoPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to listen to the AATRewardedVideoPlacement events
SWIFT_PROTOCOL("_TtP6AATKit33AATRewardedVideoPlacementDelegate_")
@protocol AATRewardedVideoPlacementDelegate <AATFullscreenPlacementDelegate>
/// This method will be called when the user gets rewarded
- (void)aatUserEarnedIncentiveWithAatReward:(AATReward * _Nonnull)aatReward;
@end



@interface AATRuntimeConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATStickyBannerPlacement;

/// AATKit main class that has the main public static methods
SWIFT_CLASS("_TtC6AATKit6AATSDK")
@interface AATSDK : NSObject
///
/// returns:
/// AATKit version.
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the AATKit library.
/// Should be called once during application initialization before any other calls to AATKit.
/// \param configuration Configuration for AATKit. see <code>AATConfiguration</code>
///
+ (void)initAATKitWith:(AATConfiguration * _Nullable)configuration SWIFT_METHOD_FAMILY(none);
/// Enables debug screen that will show after shaking the device. It is already enabled by default.
+ (void)enableDebugScreen;
/// Disables the debug screen appearing after shaking the device. It is enabled by default.
+ (void)disableDebugScreen;
/// Used for obtaining debug information
/// (the same that would be presented in dialog after shaking the device if debug screen is enabled)
///
/// returns:
/// String with debug information
+ (NSString * _Nonnull)getDebugInfo SWIFT_WARN_UNUSED_RESULT;
/// Allows to reconfigure the options for GDPR consent.
/// \param configuration New configuration. 
///
+ (void)reconfigureWithConfiguration:(AATRuntimeConfiguration * _Nonnull)configuration;
/// Checks if AATKit recognizes given device as tablet.
///
/// returns:
/// True if device is recognized as tablet, false otherwise.
+ (BOOL)isTablet SWIFT_WARN_UNUSED_RESULT;
/// Get the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in portrait screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizePortrait SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in landscape screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizeLandscape SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesPortrait SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesLandscape SWIFT_WARN_UNUSED_RESULT;
/// Notifies AATKit about viewController viewDidAppear.
/// <em>NOTE:</em> This method will update the view controller for all existing placements
/// \param controller the UIViewController that did appear
///
+ (void)controllerViewDidAppearWithController:(UIViewController * _Nonnull)controller;
/// Notifies AATKit about activity pause. Invoke this method in every activity that uses AATKit.
+ (void)controllerViewWillDisappear;
/// Creates a new fullscreen ad placement.
/// If the fullscreen ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATFullscreenPlacement, or nil if placement cannot be created.
+ (id <AATFullscreenPlacement> _Nullable)createFullscreenPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new native ad placement.
/// If the native ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param supportsMainImage True if the native ads returned should have main image asset. Keep in mind that if main image is used, it has to be displayed.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATNativeAdPlacement> _Nullable)createNativeAdPlacementWithName:(NSString * _Nonnull)name supportsMainImage:(BOOL)supportsMainImage SWIFT_WARN_UNUSED_RESULT;
/// Creates a new rewarded video placement.
/// If the rewarded video ad placement of given name already exists, it will be returned.
/// <b>Only one Rewarded Video placement can be used within the app.</b>
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATRewardedVideoPlacement> _Nullable)createRewardedVideoPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates placement with given name and size.
/// If the placement of given name and size already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param size Size of placement. Use <code>AATBannerPlacementSize</code>.
///
///
/// returns:
/// <code>AATStickyBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATStickyBannerPlacement> _Nullable)createStickyBannerPlacementWithName:(NSString * _Nonnull)name size:(enum AATBannerPlacementSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a multi-size banner placement
/// \param name placement name
///
///
/// returns:
/// <code>AATMultiSizeBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATMultiSizeBannerPlacement> _Nullable)createMultiSizeBannerPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new banner placement. If the banner placement of given name already exists, it will be returned.
/// The placement will create a copy of the configuration.Any changes made to the configuration after placement is created will be ignored.
/// The placement will ignore any changes made to configuration after it was created.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param configuration The <code>AATBannerConfiguration</code> for this placement.
///
///
/// returns:
/// Banner placement instance, or null if the placement cannot be created.
+ (id <AATInfeedBannerPlacement> _Nullable)createInfeedBannerPlacementWithName:(NSString * _Nonnull)name configuration:(AATBannerConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// Creates a new AppOpen placement.
/// <em>NOTE:</em> You should register your <code>placementName</code> on the AddApptr website
/// if you intend to target it with specific rules.
/// \param placementName Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATAppOpenAdPlacement, or nil if placement cannot be created.
+ (id <AATAppOpenAdPlacement> _Nullable)createAppOpenAdPlacementWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Set NativeAd icon position.
/// \param position ad choices icon position
///
+ (void)setAdChoicesIconPositionWithPosition:(enum AATAdChoicesIconPosition)position;
/// Allows to enable or disable selected ad networks. By default all networks are enabled.
/// \param network Ad network.
///
/// \param enabled True to enable, false to disable.
///
+ (void)setNetworkEnabledWithNetwork:(enum AATAdNetwork)network enabled:(BOOL)enabled;
/// Returns true if ad network is enabled, false otherwise.
/// \param network Ad network.
///
///
/// returns:
/// True if ad network is enabled, false otherwise.
+ (BOOL)isNetworkEnabledWithNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
/// Get option from AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// Value of the option or null if it is not set.
+ (NSString * _Nullable)getOptionWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for checking if option is enabled in AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// True if option value is “Yes”, false otherwise.
+ (BOOL)isOptionEnabledWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Set option in AATKit. Options can also be obtained from the server.
/// \param optionName The name of the option to be set.
///
/// \param optionValue The value of the option to be set.
///
+ (void)setOptionWithOptionName:(NSString * _Nonnull)optionName optionValue:(NSString * _Nonnull)optionValue;
/// Sets the targeting information for the application.
/// This information will be used only if no placement-specific targeting is available.
/// \param info Map with targeting information.
///
+ (void)setTargetingInfoWithInfo:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)info;
/// Sets the content targeting url for the application.
/// This information will be used only if no placement-specific targeting is available.
/// \param targetingUrl The targeting url
///
+ (void)setContentTargetingUrlWithTargetingUrl:(NSString * _Nonnull)targetingUrl;
/// Adds an ad network to the list of ad networks that receive targeting keywords (if any set).
/// If no ad networks are added, any set keywords will be delivered to all ad networks supporting keyword targeting.
/// \param network Chosen ad network.
///
+ (void)addAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Removes an ad network from the list of ad networks that receive targeting keywords (if any set).
/// If no ad networks are added to the list, any set keywords will be delivered to all ad networks supporting keyword targeting.
/// \param network Chosen ad network.
///
+ (void)removeAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Allows setting of ad rules that will be used before real rules from the server are downloaded.
/// \param rules String containing the rules to be used.
///
+ (void)setInitialRulesWithRules:(NSString * _Nonnull)rules;
/// Allows the AATKit to preserve last downloaded ad rules when the application is closed.
/// Such rules will be re-used next time the application is started, before new ones get downloaded.
/// \param enabled True to enable, false to disable.
///
+ (void)setRuleCachingEnabledWithEnabled:(BOOL)enabled;
/// Allows to set log level from code.
/// \param logLevel Desired log level, as in <code>AATLogLevel</code> enum.
///
+ (void)setLogLevelWithLogLevel:(enum AATLogLevel)logLevel;
+ (void)setVideoAdsMuted:(BOOL)isMuted;
+ (void)setReportsDelegate:(id <AATReportsDelegate> _Nonnull)delegate;
/// Allow passing PublisherProvidedId to AdNetworks that support it
/// \param publisherProvidedId Publisher Provided Id
///
+ (void)setPublisherProvidedId:(NSString * _Nonnull)publisherProvidedId;
@end



/// AATKit simple consent. Should be initialised with <code>NonIABConsent</code>
/// see <code>init(nonIABConsent:)</code>
SWIFT_CLASS("_TtC6AATKit16AATSimpleConsent")
@interface AATSimpleConsent : AATConsentImplementation
/// Initialize the simple consent with a <code>NonIABConsent</code> value
- (nonnull instancetype)initWithNonIABConsent:(enum NonIABConsent)nonIABConsent OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATSimpleConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit21AATStatisticsDelegate_")
@protocol AATStatisticsDelegate
/// Notifies that an adspace has been counted.
- (void)AATKitCountedAdSpace;
/// Notifies that an request has been counted for a given network.
/// \param network Network for which the request has been counted.
///
- (void)AATKitCountedRequestFor:(enum AATAdNetwork)network;
/// Notifies that an response has been counted for a given network.
/// \param network Network for which the response has been counted.
///
- (void)AATKitCountedResponseFor:(enum AATAdNetwork)network;
/// Notifies that an impression has been counted for a given network.
/// \param network Network for which the impression has been counted.
///
- (void)AATKitCountedImpressionFor:(enum AATAdNetwork)network;
/// Notifies that an viewable impression has been counted for a given network.
/// \param network Network for which the viewable impression has been counted.
///
- (void)AATKitCountedVImpressionFor:(enum AATAdNetwork)network;
/// Notifies that an click has been counted for a given network.
/// \param network Network for which the click has been counted.
///
- (void)AATKitCountedClickFor:(enum AATAdNetwork)network;
/// Notifies that an direct deal impression has been counted for a given network.
/// \param network Network for which the direct deal impression has been counted.
///
- (void)AATKitCountedDirectDealImpressionFor:(enum AATAdNetwork)network;
/// Notifies than an mediation cycle has been counted.
- (void)AATKitCountedMediationCycle;
@end

@protocol AATStickyBannerPlacementDelegate;
@class UIImage;

SWIFT_PROTOCOL("_TtP6AATKit24AATStickyBannerPlacement_")
@protocol AATStickyBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATStickyBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Returns placement view. Works only for banner placements.
///
/// returns:
/// Placement view
- (UIView * _Nullable)getPlacementView SWIFT_WARN_UNUSED_RESULT;
/// Sets placement default image. This image will be shown in placement when no ad is available.
/// \param image The image to set.
///
- (void)setDefaultImageWithImage:(UIImage * _Nonnull)image;
/// Sets gravity for ads that don’t fill entire placement area. Works only for sticky banner placements.
/// \param alignment The alignment to set.
///
- (void)setBannerAlignWithAlignment:(AATBannerAlign * _Nonnull)alignment;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@end


/// Conform to this protocol to listen to the AATStaticBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATStickyBannerPlacementDelegate_")
@protocol AATStickyBannerPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end

@protocol AATVendorConsentDelegate;

/// AATKit simple consent. Should be initialised with <code>AATVendorConsentDelegate</code>
SWIFT_CLASS("_TtC6AATKit16AATVendorConsent")
@interface AATVendorConsent : AATConsentImplementation
- (nonnull instancetype)initWithDelegate:(id <AATVendorConsentDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATVendorConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATVendorConsentDelegate_")
@protocol AATVendorConsentDelegate
- (enum NonIABConsent)getConsentForNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
- (enum NonIABConsent)getConsentForAddapptr SWIFT_WARN_UNUSED_RESULT;
@end


/// NonIABConsent.
typedef SWIFT_ENUM(NSInteger, NonIABConsent, open) {
/// <ul>
///   <li>
///     Unknown - if the user has never set a consent state.
///   </li>
/// </ul>
  NonIABConsentUnknown = 0,
/// <ul>
///   <li>
///     Consent has been granted by the user.
///   </li>
/// </ul>
  NonIABConsentObtained = 1,
/// <ul>
///   <li>
///     Consent has been partially granted by the user.
///   </li>
/// </ul>
  NonIABConsentCustom = 2,
/// <ul>
///   <li>
///     Consent has been declined by the user.
///   </li>
/// </ul>
  NonIABConsentWithheld = 3,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef AATKIT_SWIFT_H
#define AATKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AATKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AATAdChoicesIconPosition, closed) {
  AATAdChoicesIconPositionTopLeft = 0,
  AATAdChoicesIconPositionTopRight = 1,
  AATAdChoicesIconPositionBottomLeft = 2,
  AATAdChoicesIconPositionBottomRight = 3,
};


/// Conform to this protocol to be notified about the ads display events
SWIFT_PROTOCOL("_TtP6AATKit20AATAdDisplayDelegate_")
@protocol AATAdDisplayDelegate
/// This method will be called with the ad display event
- (void)aatAdCurrentlyDisplayed;
/// This method will be called when the app resumes after displaying an ad
- (void)aatResumeAfterAd;
@end

@protocol AATAdMobCustomEventsDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATAdMobCustomEvents_")
@protocol AATAdMobCustomEvents
- (void)setCustomEventDelegate:(id <AATAdMobCustomEventsDelegate> _Nonnull)delegate;
@end

@class AATReward;

SWIFT_PROTOCOL("_TtP6AATKit28AATAdMobCustomEventsDelegate_")
@protocol AATAdMobCustomEventsDelegate
- (void)customEventLoaderDidFailAd;
- (void)customEventLoaderDidReceiveAd;
- (void)customEventReportImpression;
- (void)customEventWillPresentModal;
- (void)customEventWillDismissModal;
- (void)customEventDidDismissModal;
- (void)customEventWasClicked;
- (void)didRewardUserWithReward:(AATReward * _Nonnull)reward;
@end

typedef SWIFT_ENUM(NSInteger, AATAdNetwork, open) {
  AATAdNetworkINMOBI = 0,
  AATAdNetworkADMOB = 1,
  AATAdNetworkEMPTY = 2,
  AATAdNetworkAPPLOVIN = 3,
  AATAdNetworkAPPLOVINMAX = 4,
  AATAdNetworkSMARTAD = 5,
  AATAdNetworkSMARTADSERVERDIRECT = 6,
  AATAdNetworkRTB2 = 7,
  AATAdNetworkDFP = 8,
  AATAdNetworkSMAATO = 9,
  AATAdNetworkFACEBOOK = 10,
  AATAdNetworkFEEDAD = 11,
  AATAdNetworkUNITY = 12,
  AATAdNetworkADCOLONY = 13,
  AATAdNetworkAPPNEXUS = 14,
  AATAdNetworkOGURY = 15,
  AATAdNetworkCRITEOSDK = 16,
  AATAdNetworkRUBICON = 17,
  AATAdNetworkAMAZONHB = 18,
  AATAdNetworkPUBNATIVE = 19,
  AATAdNetworkTEADS = 20,
  AATAdNetworkBLUESTACK = 21,
  AATAdNetworkYOC = 22,
  AATAdNetworkVUNGLE2 = 23,
  AATAdNetworkDFPDIRECT = 24,
};

typedef SWIFT_ENUM(NSInteger, AATAdType, open) {
  AATAdTypeFullscreen = 0,
  AATAdTypeBanner = 1,
  AATAdTypeNative = 2,
  AATAdTypeRewarded = 3,
  AATAdTypeAppOpen = 4,
};

@protocol AATAppOpenPlacementDelegate;
@protocol AATStatisticsDelegate;
@protocol AATImpressionDelegate;
@class NSString;

SWIFT_PROTOCOL("_TtP6AATKit21AATAppOpenAdPlacement_")
@protocol AATAppOpenAdPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATAppOpenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to be notified when there is no ad available
SWIFT_PROTOCOL("_TtP6AATKit15AATNoAdDelegate_")
@protocol AATNoAdDelegate
/// This method will be called when there is no ad available
- (void)aatNoAd;
@end


/// Conform to this protocol to be notified when there is an ad
SWIFT_PROTOCOL("_TtP6AATKit17AATHaveAdDelegate_")
@protocol AATHaveAdDelegate
/// This method will be called when there is an ad
- (void)aatHaveAd;
@end


/// Conform to this protocol to listen to the AATFullscreenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit30AATFullscreenPlacementDelegate_")
@protocol AATFullscreenPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end


/// Conform to this protocol to listen to the AATAppOpenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit27AATAppOpenPlacementDelegate_")
@protocol AATAppOpenPlacementDelegate <AATFullscreenPlacementDelegate>
@end

enum HorizontalAlign : NSInteger;
enum VerticalAlign : NSInteger;

SWIFT_CLASS("_TtC6AATKit14AATBannerAlign")
@interface AATBannerAlign : NSObject
- (nonnull instancetype)initWithHorizontalAlign:(enum HorizontalAlign)horizontalAlign verticalAlign:(enum VerticalAlign)verticalAlign OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HorizontalAlign, open) {
  HorizontalAlignLeading = 0,
  HorizontalAlignTrailing = 1,
  HorizontalAlignCenter = 2,
};

typedef SWIFT_ENUM(NSInteger, VerticalAlign, open) {
  VerticalAlignTop = 0,
  VerticalAlignBottom = 1,
  VerticalAlignCenter = 2,
};

@class AATBannerCacheConfiguration;
@class AATBannerRequest;
@class AATBannerPlacementWrapperView;

/// A cache of automatically preloaded banner ads.
/// The cache will always try to have a defined amount of banners available for immediate handout to the app whenever they are needed. <em>Note:</em> The BannerCache needs to be destroyed when no longer needed. See <code>AATBannerCache/init(cacheConfiguration:)</code>
SWIFT_CLASS("_TtC6AATKit14AATBannerCache")
@interface AATBannerCache : NSObject
/// set statistics delegate
/// <code>AATStatisticsDelegate</code> implementation that will be notified about statistics events.
@property (nonatomic, weak) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Setting impressions delegate
/// Set the banner cache <code>AATImpressionDelegate</code>
/// <code>AATImpressionDelegate</code> instance
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Creates a cache of automatically preloaded banner ads.
/// \param cacheConfiguration instance of <code>AATBannerCacheConfiguration</code> used to configure the cache.
///
- (nonnull instancetype)initWithCacheConfiguration:(AATBannerCacheConfiguration * _Nonnull)cacheConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Updates the configuration that will be used when requesting new banners.
/// \param requestConfiguration AATBannerRequest instance
///
/// \param shouldRefresh True if the whole cache should be re-loaded with new banner request configuration, false if new configuration should only be used for new requests.
///
- (void)updateRequestConfiguration:(AATBannerRequest * _Nonnull)requestConfiguration shouldRefresh:(BOOL)shouldRefresh;
/// Returns an instance of <code>AATBannerPlacementWrapperView</code> to be used within the app. Also automatically counts an ad space.
/// BannerCache will no longer hold any references to returned banners, and they need to be destroyed manually by the app.
/// \param force true if cache should try to return banner ignoring the frequency capping set by { BannerCacheConfiguration.setMinimumDelay(int) }, default value is false
///
///
/// returns:
/// Ad View to be displayed
- (AATBannerPlacementWrapperView * _Nullable)consumeWithForce:(BOOL)force SWIFT_WARN_UNUSED_RESULT;
/// Destroys the BannerCache, clearing all preloaded banner ads and canceling pending reload requests.
/// <ul>
///   <li>
///     For proper memory management, it needs to be called when the BannerCache is no longer needed.
///   </li>
///   <li>
///     Destroyed BannerCache can no longer be used
///   </li>
/// </ul>
- (void)destroy;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AATBannerRequestError;

@interface AATBannerCache (SWIFT_EXTENSION(AATKit))
- (void)requestCompletedSuccessfullyWithRequest:(AATBannerRequest * _Nonnull)request with:(AATBannerPlacementWrapperView * _Nonnull)view;
- (void)requestFailedToLoadWithRequest:(AATBannerRequest * _Nonnull)request with:(AATBannerRequestError * _Nonnull)error;
@end

@protocol AATBannerCacheDelegate;
@protocol AATBannerRequestDelegate;

/// A configuration object to be used when creating AATBannerCache
SWIFT_CLASS("_TtC6AATKit27AATBannerCacheConfiguration")
@interface AATBannerCacheConfiguration : NSObject
@property (nonatomic, weak) id <AATBannerCacheDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable bannerRequestDelegate;
@property (nonatomic) BOOL shouldCacheAdditionalAdAtStart;
@property (nonatomic, strong) AATBannerRequest * _Nonnull requestConfiguration;
@property (nonatomic) NSTimeInterval minDelay;
/// Init the <code>AATBannerCacheConfiguration</code> object
/// \param placementName the placement name
///
/// \param size the desired cache size
///
- (nonnull instancetype)initWithPlacementName:(NSString * _Nonnull)placementName size:(NSInteger)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AATBannerCacheConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATBannerCacheDelegate_")
@protocol AATBannerCacheDelegate
- (void)firstBannerLoaded;
@end


/// Banner configuration class
SWIFT_CLASS("_TtC6AATKit22AATBannerConfiguration")
@interface AATBannerConfiguration : NSObject
@property (nonatomic) BOOL isManualAdSpaceCounting;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setNumberOfWorkers:(NSInteger)numberOfWorkers;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATBannerConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AATBannerPlacementSize, open) {
  AATBannerPlacementSizeBanner320x53 = 0,
  AATBannerPlacementSizeBanner320x50 = 1,
  AATBannerPlacementSizeBanner375x50 = 2,
  AATBannerPlacementSizeBanner390x50 = 3,
  AATBannerPlacementSizeBanner414x50 = 4,
  AATBannerPlacementSizeBanner428x50 = 5,
  AATBannerPlacementSizeBanner768x90 = 6,
  AATBannerPlacementSizeBanner300x250 = 7,
  AATBannerPlacementSizeBanner468x60 = 8,
  AATBannerPlacementSizeBanner320x75 = 9,
  AATBannerPlacementSizeBanner320x100 = 10,
  AATBannerPlacementSizeBanner320x150 = 11,
  AATBannerPlacementSizeBanner320x160 = 12,
  AATBannerPlacementSizeBanner300x50 = 13,
  AATBannerPlacementSizeBanner320x480 = 14,
};

@class NSCoder;

SWIFT_CLASS("_TtC6AATKit29AATBannerPlacementWrapperView")
@interface AATBannerPlacementWrapperView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The banner request that will be used by the infeed banner placement
SWIFT_CLASS("_TtC6AATKit16AATBannerRequest")
@interface AATBannerRequest : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInformation;
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDelegate:(id <AATBannerRequestDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Update request sizes
/// \param sizes a set of <code>AATBannerSize</code>
///
- (void)setRequestBannerSizes:(NSSet<NSNumber *> * _Nonnull)sizes;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATBannerRequestDelegate_")
@protocol AATBannerRequestDelegate
- (BOOL)shouldUseTargetingFor:(AATBannerRequest * _Nonnull)request network:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
@end


/// Banner request error class
SWIFT_CLASS("_TtC6AATKit21AATBannerRequestError")
@interface AATBannerRequestError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATBannerSize, open) {
  AATBannerSizeBanner300x50 = 0,
  AATBannerSizeBanner320x53 = 1,
  AATBannerSizeBanner768x90 = 2,
  AATBannerSizeBanner300x250 = 3,
  AATBannerSizeBanner468x60 = 4,
  AATBannerSizeMultipleSizes = 5,
  AATBannerSizeBanner320x75 = 6,
  AATBannerSizeBanner320x100 = 7,
  AATBannerSizeBanner320x150 = 8,
  AATBannerSizeBanner320x160 = 9,
  AATBannerSizeBanner320x480 = 10,
  AATBannerSizeBanner728x90 = 11,
  AATBannerSizeBanner320x50 = 12,
  AATBannerSizeBanner375x50 = 13,
  AATBannerSizeBanner390x50 = 14,
  AATBannerSizeBanner414x50 = 15,
  AATBannerSizeBanner428x50 = 16,
};

enum NonIABConsent : NSInteger;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPDelegate_")
@protocol AATCMPDelegate
- (void)consentDidUpdate:(enum NonIABConsent)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
@end

@class UIViewController;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPProtocol_")
@protocol AATCMPProtocol
- (BOOL)isSuccessfullyInitialized:(NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)start:(NSString * _Nonnull)source;
- (void)setDelegate:(NSString * _Nonnull)source :(id <AATCMPDelegate> _Nonnull)delegate;
- (void)reload:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (enum NonIABConsent)getConsentForNetwork:(NSString * _Nonnull)source :(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
- (void)showIfNeeded:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (void)editConsent:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
@end

@class AATConsentImplementation;

/// AATKit Runtime Configurations
SWIFT_CLASS("_TtC6AATKit23AATRuntimeConfiguration")
@interface AATRuntimeConfiguration : NSObject
@property (nonatomic) BOOL consentRequired;
@property (nonatomic, strong) AATConsentImplementation * _Nullable consent;
@property (nonatomic) BOOL isUseGeoLocation;
/// Creates the AATRuntimeConfiguration object to be used when reconfiguring AATKit.
/// It will be automatically initialized with previously used values.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@protocol AATDelegate;
@class NSNumber;

/// AATKit Configurations
SWIFT_CLASS("_TtC6AATKit16AATConfiguration")
@interface AATConfiguration : AATRuntimeConfiguration
@property (nonatomic, weak) id <AATDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable initialRules;
@property (nonatomic) BOOL shouldCacheRules;
@property (nonatomic) BOOL shouldSkipRules;
@property (nonatomic, copy) NSString * _Nullable alternativeBundleId;
@property (nonatomic) BOOL shouldReportUsingAlternativeBundleId;
@property (nonatomic, strong) NSNumber * _Nullable testModeAccountId;
@property (nonatomic) BOOL useDebugShake;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATConfiguration (SWIFT_EXTENSION(AATKit))
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6AATKit24AATConsentImplementation")
@interface AATConsentImplementation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setNoConsentNetworkStopSet:(NSSet<NSNumber *> * _Nonnull)stopSet;
@end



/// <ul>
///   <li>
///     Notifies about AATKit events.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP6AATKit11AATDelegate_")
@protocol AATDelegate
@optional
/// Notifies that the AATKit has obtained ad rules.
/// \param fromTheServer Indicates if the rules came from the server. It will return false if the currently used rules come from the <code>AATSDK.setInitialRules(rules:)</code> method or the cached rules are used.
///
- (void)AATKitObtainedAdRulesFromTheServer:(BOOL)fromTheServer;
/// Notifies that application’s bundle ID was not recognized by the AddApptr server.
- (void)AATKitUnknownBundleId;
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATFullscreenPlacement_")
@protocol AATFullscreenPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATFullscreenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end



enum AATMediationType : NSInteger;

/// An object contains impression level information.
SWIFT_CLASS("_TtC6AATKit13AATImpression")
@interface AATImpression : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable bannerSize;
@property (nonatomic, readonly) enum AATAdNetwork adNetwork;
@property (nonatomic, readonly, copy) NSString * _Nonnull networkKey;
@property (nonatomic, readonly) BOOL isDirectDeal;
@property (nonatomic, readonly) enum AATMediationType mediationType;
@property (nonatomic, readonly) double price;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate called when the impression is counted.
SWIFT_PROTOCOL("_TtP6AATKit21AATImpressionDelegate_")
@protocol AATImpressionDelegate
/// Notifies that AATKit has counted an impression.
/// \param impression the AATImpression object
///
- (void)didCountImpression:(AATImpression * _Nonnull)impression;
@end

@protocol AATInfeedBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit24AATInfeedBannerPlacement_")
@protocol AATInfeedBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATInfeedBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Request banner ad from the placement
/// \param request the <code>AATBannerRequest</code> to be used
///
/// \param completion Completion result with <code>AATBannerPlacementWrapperView</code> or <code>AATBannerRequestError</code>
///
- (void)requestAdWithRequest:(AATBannerRequest * _Nonnull)request completion:(void (^ _Nonnull)(AATBannerPlacementWrapperView * _Nullable, AATBannerRequestError * _Nullable))completion;
/// Cancel a specific <code>AATBannerRequest</code>
/// \param request The request to be canceled
///
- (void)cancelWithRequest:(AATBannerRequest * _Nonnull)request;
/// Manually Count an Ad Space
- (void)countAdSpace;
@end


/// Conform to this protocol to listen to the AATInfeedBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATInfeedBannerPlacementDelegate_")
@protocol AATInfeedBannerPlacementDelegate <AATAdDisplayDelegate>
@end


SWIFT_PROTOCOL("_TtP6AATKit16AATInitializable_")
@protocol AATInitializable
- (nonnull instancetype)init;
@end


SWIFT_CLASS("_TtC6AATKit16AATLocationUtils")
@interface AATLocationUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface AATLocationUtils (SWIFT_EXTENSION(AATKit)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


/// Desired log level
typedef SWIFT_ENUM(NSInteger, AATLogLevel, open) {
  AATLogLevelVerbose = 0,
  AATLogLevelDebug = 1,
  AATLogLevelInfo = 2,
  AATLogLevelWarn = 3,
  AATLogLevelError = 4,
};


SWIFT_CLASS("_TtC6AATKit9AATLogger")
@interface AATLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AATManagedConsentDelegate;

/// The managed consent (should be initialized with <code>AATCMPProtocol</code>). Will fire the different events of the user consent interactions. See <code>AATManagedConsentDelegate</code>
SWIFT_CLASS("_TtC6AATKit17AATManagedConsent")
@interface AATManagedConsent : AATConsentImplementation
- (nullable instancetype)initWithCmp:(id <AATCMPProtocol> _Nullable)cmp delegate:(id <AATManagedConsentDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)showIfNeeded:(UIViewController * _Nonnull)viewController;
- (void)editConsent:(UIViewController * _Nonnull)viewController;
- (void)reload:(UIViewController * _Nonnull)viewController;
@end



@interface AATManagedConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATManagedConsent (SWIFT_EXTENSION(AATKit)) <AATCMPDelegate>
- (void)consentDidUpdate:(enum NonIABConsent)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
@end


SWIFT_PROTOCOL("_TtP6AATKit25AATManagedConsentDelegate_")
@protocol AATManagedConsentDelegate
- (void)managedConsentNeedsUserInterface:(AATManagedConsent * _Nonnull)managedConsent;
- (void)managedConsentCMPFinishedWith:(enum NonIABConsent)state;
- (void)managedConsentCMPFailedToLoad:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
- (void)managedConsentCMPFailedToShow:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
@end

/// <ul>
///   <li>
///     AATKit rule mediation type
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AATMediationType, closed) {
  AATMediationTypeWATERFALL = 1,
  AATMediationTypeAUCTION = 2,
  AATMediationTypeMAYO = 3,
};

@protocol AATMultiSizeBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit27AATMultiSizeBannerPlacement_")
@protocol AATMultiSizeBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATMultiSizeBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@end


/// Conform to this protocol to listen to the AATMultiSizeBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit35AATMultiSizeBannerPlacementDelegate_")
@protocol AATMultiSizeBannerPlacementDelegate <AATAdDisplayDelegate, AATNoAdDelegate>
/// This method will be called when there is an ad
- (void)aatHaveAdWithBannerViewWithBannerView:(AATBannerPlacementWrapperView * _Nonnull)bannerView;
@end

@class AATNativeAdRating;

SWIFT_PROTOCOL("_TtP6AATKit15AATNativeAdData_")
@protocol AATNativeAdData <NSObject>
/// Binds this native ad instance with given ViewGroup. Needed for click handling and tracking.
/// \param view View used to render the native ad.
///
/// \param mainImageView View used to show the main image of the ad. Can be null.
///
/// \param iconView View used to show the icon of the native ad.
///
/// \param ctaView View used to show the Call To Action of the native ad.
///
- (void)attachToView:(UIView * _Nonnull)view mainImageView:(UIView * _Nullable)mainImageView iconView:(UIView * _Nullable)iconView ctaView:(UIView * _Nullable)ctaView;
/// Removes the binding between native ad and ViewGroup.
/// Should be called when the native ad will no longer be presented and should be destroyed.
- (void)detachFromLayout;
/// Returns the title of native ad.
///
/// returns:
/// String with title asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Returns the description of native ad.
///
/// returns:
/// String with description asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable adDescription;
/// Returns the call to action of native ad.
///
/// returns:
/// String with call to action asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
/// Returns the URL of the image asset of native ad.
///
/// returns:
/// String with URL of the image asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// Returns the URL of the icon asset of native ad.
///
/// returns:
/// String with URL of the icon asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// Returns the rating asset of native ad.
///
/// returns:
/// NativeAdRating instance containing both value and scale of rating, or null if it is not available.
@property (nonatomic, readonly, strong) AATNativeAdRating * _Nullable rating;
/// Returns the view with branding logo or ad information related to the ad network providing the native ad.
/// Some networks like Facebook Audience Network or Flurry require this special view to be visible on native ads.
///
/// returns:
/// View that should be added to native ad layout, or null if it is not available.
@property (nonatomic, readonly, strong) UIView * _Nullable brandingLogo;
/// Returns the advertiser asset of native ad (not the same as ad network providing it).
///
/// returns:
/// String with advertiser asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable advertiser;
/// Returns the ad network providing given native ad
///
/// returns:
/// Enum value representing the ad network providing the ad.
@property (nonatomic, readonly) enum AATAdNetwork network;
/// Returns if the native ad has expired and shall no longer be used.
///
/// returns:
/// True if native ad has expired, false otherwise.
- (BOOL)isExpired SWIFT_WARN_UNUSED_RESULT;
/// Returns if the native ad is ready to be displayed.
///
/// returns:
/// True if native ad is ready, false otherwise.
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATNativePlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATNativeAdPlacement_")
@protocol AATNativeAdPlacement
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATNativePlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Requests placement reload.
- (BOOL)reload;
/// Returns how many ads are currently loading for given native ad placement.
///
/// returns:
/// Number of ads that are currently loading for given placement.
- (NSInteger)getNumberOfCurrentlyLoadingNativeAds SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Manually Count an Ad Space
- (BOOL)reportAdSpace SWIFT_WARN_UNUSED_RESULT;
/// Returns the instance of native ad for given native ad placement.
///
/// returns:
/// Native ad instance if it is loaded for given placement, null otherwise.
- (id <AATNativeAdData> _Nullable)getNativeAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Native ad rating
SWIFT_CLASS("_TtC6AATKit17AATNativeAdRating")
@interface AATNativeAdRating : NSObject
- (nonnull instancetype)initWithValue:(double)value scale:(double)scale OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATNativeAdType, open) {
  AATNativeAdTypeAppInstall = 0,
  AATNativeAdTypeContent = 1,
  AATNativeAdTypeVideo = 2,
  AATNativeAdTypeUnified = 3,
  AATNativeAdTypeOther = 4,
  AATNativeAdTypeUnknown = 5,
};


/// Conform to this protocol to listen to the AATNativePlacement events
SWIFT_PROTOCOL("_TtP6AATKit26AATNativePlacementDelegate_")
@protocol AATNativePlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end


typedef SWIFT_ENUM(NSInteger, AATPluginName, open) {
  AATPluginNameAdobe = 1,
  AATPluginNameCorona = 2,
  AATPluginNameMarmalade = 3,
  AATPluginNameUnity = 4,
  AATPluginNameXamarin = 5,
  AATPluginNameReactNative = 6,
  AATPluginNameCordova = 7,
};


SWIFT_CLASS("_TtC6AATKit23AATPluginVersioningTool")
@interface AATPluginVersioningTool : NSObject
+ (void)appendPluginInformation:(enum AATPluginName)pluginName patchLevel:(NSString * _Nonnull)patchLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Will be notified with reports event
SWIFT_PROTOCOL("_TtP6AATKit18AATReportsDelegate_")
@protocol AATReportsDelegate
/// Notifies you with AATKit reports event.
/// \param report The report content.
///
- (void)onReportSent:(NSString * _Nonnull)report;
@end


/// The rewarded video incentive reward object
SWIFT_CLASS("_TtC6AATKit9AATReward")
@interface AATReward : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATRewardedVideoPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit25AATRewardedVideoPlacement_")
@protocol AATRewardedVideoPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATRewardedVideoPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to listen to the AATRewardedVideoPlacement events
SWIFT_PROTOCOL("_TtP6AATKit33AATRewardedVideoPlacementDelegate_")
@protocol AATRewardedVideoPlacementDelegate <AATFullscreenPlacementDelegate>
/// This method will be called when the user gets rewarded
- (void)aatUserEarnedIncentiveWithAatReward:(AATReward * _Nonnull)aatReward;
@end



@interface AATRuntimeConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATStickyBannerPlacement;

/// AATKit main class that has the main public static methods
SWIFT_CLASS("_TtC6AATKit6AATSDK")
@interface AATSDK : NSObject
///
/// returns:
/// AATKit version.
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the AATKit library.
/// Should be called once during application initialization before any other calls to AATKit.
/// \param configuration Configuration for AATKit. see <code>AATConfiguration</code>
///
+ (void)initAATKitWith:(AATConfiguration * _Nullable)configuration SWIFT_METHOD_FAMILY(none);
/// Enables debug screen that will show after shaking the device. It is already enabled by default.
+ (void)enableDebugScreen;
/// Disables the debug screen appearing after shaking the device. It is enabled by default.
+ (void)disableDebugScreen;
/// Used for obtaining debug information
/// (the same that would be presented in dialog after shaking the device if debug screen is enabled)
///
/// returns:
/// String with debug information
+ (NSString * _Nonnull)getDebugInfo SWIFT_WARN_UNUSED_RESULT;
/// Allows to reconfigure the options for GDPR consent.
/// \param configuration New configuration. 
///
+ (void)reconfigureWithConfiguration:(AATRuntimeConfiguration * _Nonnull)configuration;
/// Checks if AATKit recognizes given device as tablet.
///
/// returns:
/// True if device is recognized as tablet, false otherwise.
+ (BOOL)isTablet SWIFT_WARN_UNUSED_RESULT;
/// Get the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in portrait screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizePortrait SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in landscape screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizeLandscape SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesPortrait SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesLandscape SWIFT_WARN_UNUSED_RESULT;
/// Notifies AATKit about viewController viewDidAppear.
/// <em>NOTE:</em> This method will update the view controller for all existing placements
/// \param controller the UIViewController that did appear
///
+ (void)controllerViewDidAppearWithController:(UIViewController * _Nonnull)controller;
/// Notifies AATKit about activity pause. Invoke this method in every activity that uses AATKit.
+ (void)controllerViewWillDisappear;
/// Creates a new fullscreen ad placement.
/// If the fullscreen ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATFullscreenPlacement, or nil if placement cannot be created.
+ (id <AATFullscreenPlacement> _Nullable)createFullscreenPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new native ad placement.
/// If the native ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param supportsMainImage True if the native ads returned should have main image asset. Keep in mind that if main image is used, it has to be displayed.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATNativeAdPlacement> _Nullable)createNativeAdPlacementWithName:(NSString * _Nonnull)name supportsMainImage:(BOOL)supportsMainImage SWIFT_WARN_UNUSED_RESULT;
/// Creates a new rewarded video placement.
/// If the rewarded video ad placement of given name already exists, it will be returned.
/// <b>Only one Rewarded Video placement can be used within the app.</b>
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATRewardedVideoPlacement> _Nullable)createRewardedVideoPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates placement with given name and size.
/// If the placement of given name and size already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param size Size of placement. Use <code>AATBannerPlacementSize</code>.
///
///
/// returns:
/// <code>AATStickyBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATStickyBannerPlacement> _Nullable)createStickyBannerPlacementWithName:(NSString * _Nonnull)name size:(enum AATBannerPlacementSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a multi-size banner placement
/// \param name placement name
///
///
/// returns:
/// <code>AATMultiSizeBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATMultiSizeBannerPlacement> _Nullable)createMultiSizeBannerPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new banner placement. If the banner placement of given name already exists, it will be returned.
/// The placement will create a copy of the configuration.Any changes made to the configuration after placement is created will be ignored.
/// The placement will ignore any changes made to configuration after it was created.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param configuration The <code>AATBannerConfiguration</code> for this placement.
///
///
/// returns:
/// Banner placement instance, or null if the placement cannot be created.
+ (id <AATInfeedBannerPlacement> _Nullable)createInfeedBannerPlacementWithName:(NSString * _Nonnull)name configuration:(AATBannerConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// Creates a new AppOpen placement.
/// <em>NOTE:</em> You should register your <code>placementName</code> on the AddApptr website
/// if you intend to target it with specific rules.
/// \param placementName Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATAppOpenAdPlacement, or nil if placement cannot be created.
+ (id <AATAppOpenAdPlacement> _Nullable)createAppOpenAdPlacementWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Set NativeAd icon position.
/// \param position ad choices icon position
///
+ (void)setAdChoicesIconPositionWithPosition:(enum AATAdChoicesIconPosition)position;
/// Allows to enable or disable selected ad networks. By default all networks are enabled.
/// \param network Ad network.
///
/// \param enabled True to enable, false to disable.
///
+ (void)setNetworkEnabledWithNetwork:(enum AATAdNetwork)network enabled:(BOOL)enabled;
/// Returns true if ad network is enabled, false otherwise.
/// \param network Ad network.
///
///
/// returns:
/// True if ad network is enabled, false otherwise.
+ (BOOL)isNetworkEnabledWithNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
/// Get option from AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// Value of the option or null if it is not set.
+ (NSString * _Nullable)getOptionWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for checking if option is enabled in AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// True if option value is “Yes”, false otherwise.
+ (BOOL)isOptionEnabledWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Set option in AATKit. Options can also be obtained from the server.
/// \param optionName The name of the option to be set.
///
/// \param optionValue The value of the option to be set.
///
+ (void)setOptionWithOptionName:(NSString * _Nonnull)optionName optionValue:(NSString * _Nonnull)optionValue;
/// Sets the targeting information for the application.
/// This information will be used only if no placement-specific targeting is available.
/// \param info Map with targeting information.
///
+ (void)setTargetingInfoWithInfo:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)info;
/// Sets the content targeting url for the application.
/// This information will be used only if no placement-specific targeting is available.
/// \param targetingUrl The targeting url
///
+ (void)setContentTargetingUrlWithTargetingUrl:(NSString * _Nonnull)targetingUrl;
/// Adds an ad network to the list of ad networks that receive targeting keywords (if any set).
/// If no ad networks are added, any set keywords will be delivered to all ad networks supporting keyword targeting.
/// \param network Chosen ad network.
///
+ (void)addAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Removes an ad network from the list of ad networks that receive targeting keywords (if any set).
/// If no ad networks are added to the list, any set keywords will be delivered to all ad networks supporting keyword targeting.
/// \param network Chosen ad network.
///
+ (void)removeAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Allows setting of ad rules that will be used before real rules from the server are downloaded.
/// \param rules String containing the rules to be used.
///
+ (void)setInitialRulesWithRules:(NSString * _Nonnull)rules;
/// Allows the AATKit to preserve last downloaded ad rules when the application is closed.
/// Such rules will be re-used next time the application is started, before new ones get downloaded.
/// \param enabled True to enable, false to disable.
///
+ (void)setRuleCachingEnabledWithEnabled:(BOOL)enabled;
/// Allows to set log level from code.
/// \param logLevel Desired log level, as in <code>AATLogLevel</code> enum.
///
+ (void)setLogLevelWithLogLevel:(enum AATLogLevel)logLevel;
+ (void)setVideoAdsMuted:(BOOL)isMuted;
+ (void)setReportsDelegate:(id <AATReportsDelegate> _Nonnull)delegate;
/// Allow passing PublisherProvidedId to AdNetworks that support it
/// \param publisherProvidedId Publisher Provided Id
///
+ (void)setPublisherProvidedId:(NSString * _Nonnull)publisherProvidedId;
@end



/// AATKit simple consent. Should be initialised with <code>NonIABConsent</code>
/// see <code>init(nonIABConsent:)</code>
SWIFT_CLASS("_TtC6AATKit16AATSimpleConsent")
@interface AATSimpleConsent : AATConsentImplementation
/// Initialize the simple consent with a <code>NonIABConsent</code> value
- (nonnull instancetype)initWithNonIABConsent:(enum NonIABConsent)nonIABConsent OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATSimpleConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit21AATStatisticsDelegate_")
@protocol AATStatisticsDelegate
/// Notifies that an adspace has been counted.
- (void)AATKitCountedAdSpace;
/// Notifies that an request has been counted for a given network.
/// \param network Network for which the request has been counted.
///
- (void)AATKitCountedRequestFor:(enum AATAdNetwork)network;
/// Notifies that an response has been counted for a given network.
/// \param network Network for which the response has been counted.
///
- (void)AATKitCountedResponseFor:(enum AATAdNetwork)network;
/// Notifies that an impression has been counted for a given network.
/// \param network Network for which the impression has been counted.
///
- (void)AATKitCountedImpressionFor:(enum AATAdNetwork)network;
/// Notifies that an viewable impression has been counted for a given network.
/// \param network Network for which the viewable impression has been counted.
///
- (void)AATKitCountedVImpressionFor:(enum AATAdNetwork)network;
/// Notifies that an click has been counted for a given network.
/// \param network Network for which the click has been counted.
///
- (void)AATKitCountedClickFor:(enum AATAdNetwork)network;
/// Notifies that an direct deal impression has been counted for a given network.
/// \param network Network for which the direct deal impression has been counted.
///
- (void)AATKitCountedDirectDealImpressionFor:(enum AATAdNetwork)network;
/// Notifies than an mediation cycle has been counted.
- (void)AATKitCountedMediationCycle;
@end

@protocol AATStickyBannerPlacementDelegate;
@class UIImage;

SWIFT_PROTOCOL("_TtP6AATKit24AATStickyBannerPlacement_")
@protocol AATStickyBannerPlacement
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATStickyBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Returns placement view. Works only for banner placements.
///
/// returns:
/// Placement view
- (UIView * _Nullable)getPlacementView SWIFT_WARN_UNUSED_RESULT;
/// Sets placement default image. This image will be shown in placement when no ad is available.
/// \param image The image to set.
///
- (void)setDefaultImageWithImage:(UIImage * _Nonnull)image;
/// Sets gravity for ads that don’t fill entire placement area. Works only for sticky banner placements.
/// \param alignment The alignment to set.
///
- (void)setBannerAlignWithAlignment:(AATBannerAlign * _Nonnull)alignment;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@end


/// Conform to this protocol to listen to the AATStaticBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATStickyBannerPlacementDelegate_")
@protocol AATStickyBannerPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end

@protocol AATVendorConsentDelegate;

/// AATKit simple consent. Should be initialised with <code>AATVendorConsentDelegate</code>
SWIFT_CLASS("_TtC6AATKit16AATVendorConsent")
@interface AATVendorConsent : AATConsentImplementation
- (nonnull instancetype)initWithDelegate:(id <AATVendorConsentDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATVendorConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATVendorConsentDelegate_")
@protocol AATVendorConsentDelegate
- (enum NonIABConsent)getConsentForNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
- (enum NonIABConsent)getConsentForAddapptr SWIFT_WARN_UNUSED_RESULT;
@end


/// NonIABConsent.
typedef SWIFT_ENUM(NSInteger, NonIABConsent, open) {
/// <ul>
///   <li>
///     Unknown - if the user has never set a consent state.
///   </li>
/// </ul>
  NonIABConsentUnknown = 0,
/// <ul>
///   <li>
///     Consent has been granted by the user.
///   </li>
/// </ul>
  NonIABConsentObtained = 1,
/// <ul>
///   <li>
///     Consent has been partially granted by the user.
///   </li>
/// </ul>
  NonIABConsentCustom = 2,
/// <ul>
///   <li>
///     Consent has been declined by the user.
///   </li>
/// </ul>
  NonIABConsentWithheld = 3,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
